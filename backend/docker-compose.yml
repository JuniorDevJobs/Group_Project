services:
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8090:80" 
    depends_on:
      - web
      - frontend
    networks:
      - app_network
    

  web:
    build: .
    command: bash -c "./run_compose.sh && gunicorn --bind 0.0.0.0:8000 --workers=3 backend_proj.wsgi:application"
    volumes:
      - .:/app
    env_file:
      - .env  
    # ports: # for testing endpoints
    #   - "8000:8000"
    expose:
      - "8000"
    networks:
      - app_network
    depends_on:
      - redis
      - db
    environment:
      - REDIS_HOST=redis
      - FINDWORK_API_KEY=${FINDWORK_API_KEY}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - CELERY_BROKER_URL=redis://backend-redis-1:6379/0


  redis:
    image: "redis:alpine"
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app_network

  db:
    image: postgres:latest
    container_name: postgres_container_jobs_app
    env_file:
      - .env  
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
  
  celery:
    build: .
    command: celery -A backend_proj.celery worker --loglevel=info
    depends_on:
      - web
      - redis
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - app_network

  celery-beat:
    build: .
    command: celery -A backend_proj.celery beat --loglevel=info
    depends_on:
      - web
      - redis
      - celery
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - app_network
  
  frontend:
    image: frontend
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "80"
    networks:
      - app_network
    restart: always
    depends_on:
      - web

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
